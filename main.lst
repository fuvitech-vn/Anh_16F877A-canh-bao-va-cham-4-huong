CCS PCM C Compiler, Version 5.115, 43599               19-Feb-25 16:00

               Filename:   D:\fuvitech\Do an sv\CanhBaoVaChamOto4Huong\main.lst

               ROM used:   2366 words (29%)
                           Largest free fragment is 2048
               RAM used:   51 (14%) at main() level
                           73 (20%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  07
0001:  MOVWF  0A
0002:  GOTO   775
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  DATA 44,1D
0005:  DATA 25,17
0006:  DATA 30,33
0007:  DATA E3,36
0008:  DATA 20,10
0009:  DATA 20,00
000A:  DATA 54,1D
000B:  DATA 25,17
000C:  DATA 30,33
000D:  DATA E3,36
000E:  DATA 20,10
000F:  DATA 20,00
0010:  DATA 4E,1D
0011:  DATA 25,17
0012:  DATA 30,33
0013:  DATA E3,36
0014:  DATA 20,10
0015:  DATA 20,00
0016:  DATA 42,1D
0017:  DATA 25,17
0018:  DATA 30,33
0019:  DATA E3,36
001A:  DATA 20,10
001B:  DATA 20,00
001C:  DATA D3,32
001D:  DATA 74,10
001E:  DATA 54,34
001F:  DATA F2,32
0020:  DATA 73,34
0021:  DATA 6F,36
0022:  DATA 64,00
0023:  DATA 54,34
0024:  DATA F2,32
0025:  DATA 73,34
0026:  DATA 6F,36
0027:  DATA 64,1D
0028:  DATA A0,12
0029:  DATA 66,00
002A:  DATA 0C,00
002B:  DATA 0C,00
002C:  DATA C8,22
002D:  DATA 4C,26
002E:  DATA 4F,00
*
0184:  MOVF   0B,W
0185:  MOVWF  4A
0186:  BCF    0B.7
0187:  BSF    03.5
0188:  BSF    03.6
0189:  BSF    0C.7
018A:  BSF    0C.0
018B:  NOP
018C:  NOP
018D:  BCF    03.5
018E:  BCF    03.6
018F:  BTFSC  4A.7
0190:  BSF    0B.7
0191:  BSF    03.6
0192:  MOVF   0C,W
0193:  ANDLW  7F
0194:  BTFSC  03.2
0195:  GOTO   1D8
0196:  BCF    03.6
0197:  MOVWF  4A
0198:  BSF    03.6
0199:  MOVF   0D,W
019A:  BCF    03.6
019B:  MOVWF  4B
019C:  BSF    03.6
019D:  MOVF   0F,W
019E:  BCF    03.6
019F:  MOVWF  4C
01A0:  MOVF   4A,W
01A1:  MOVWF  57
01A2:  CALL   158
01A3:  MOVF   4B,W
01A4:  BSF    03.6
01A5:  MOVWF  0D
01A6:  BCF    03.6
01A7:  MOVF   4C,W
01A8:  BSF    03.6
01A9:  MOVWF  0F
01AA:  BCF    03.6
01AB:  MOVF   0B,W
01AC:  MOVWF  4D
01AD:  BCF    0B.7
01AE:  BSF    03.5
01AF:  BSF    03.6
01B0:  BSF    0C.7
01B1:  BSF    0C.0
01B2:  NOP
01B3:  NOP
01B4:  BCF    03.5
01B5:  BCF    03.6
01B6:  BTFSC  4D.7
01B7:  BSF    0B.7
01B8:  BSF    03.6
01B9:  RLF    0C,W
01BA:  RLF    0E,W
01BB:  ANDLW  7F
01BC:  BTFSC  03.2
01BD:  GOTO   1D8
01BE:  BCF    03.6
01BF:  MOVWF  4A
01C0:  BSF    03.6
01C1:  MOVF   0D,W
01C2:  BCF    03.6
01C3:  MOVWF  4B
01C4:  BSF    03.6
01C5:  MOVF   0F,W
01C6:  BCF    03.6
01C7:  MOVWF  4C
01C8:  MOVF   4A,W
01C9:  MOVWF  57
01CA:  CALL   158
01CB:  MOVF   4B,W
01CC:  BSF    03.6
01CD:  MOVWF  0D
01CE:  BCF    03.6
01CF:  MOVF   4C,W
01D0:  BSF    03.6
01D1:  MOVWF  0F
01D2:  INCF   0D,F
01D3:  BTFSC  03.2
01D4:  INCF   0F,F
01D5:  BCF    03.6
01D6:  GOTO   184
01D7:  BSF    03.6
01D8:  BCF    03.6
01D9:  RETURN
*
01F0:  MOVF   57,W
01F1:  BTFSC  03.2
01F2:  GOTO   260
01F3:  MOVWF  5F
01F4:  MOVF   5B,W
01F5:  BTFSC  03.2
01F6:  GOTO   260
01F7:  ADDWF  5F,F
01F8:  BTFSC  03.0
01F9:  GOTO   201
01FA:  MOVLW  7F
01FB:  SUBWF  5F,F
01FC:  BTFSS  03.0
01FD:  GOTO   260
01FE:  BTFSC  03.2
01FF:  GOTO   260
0200:  GOTO   205
0201:  MOVLW  81
0202:  ADDWF  5F,F
0203:  BTFSC  03.0
0204:  GOTO   260
0205:  MOVF   5F,W
0206:  MOVWF  77
0207:  CLRF   78
0208:  CLRF   79
0209:  CLRF   7A
020A:  MOVF   58,W
020B:  MOVWF  63
020C:  BSF    63.7
020D:  MOVF   59,W
020E:  MOVWF  62
020F:  MOVF   5A,W
0210:  MOVWF  61
0211:  MOVLW  18
0212:  MOVWF  5F
0213:  CLRF   60
0214:  BTFSS  61.0
0215:  GOTO   22E
0216:  MOVF   5E,W
0217:  ADDWF  7A,F
0218:  BTFSS  03.0
0219:  GOTO   220
021A:  INCF   79,F
021B:  BTFSS  03.2
021C:  GOTO   220
021D:  INCF   78,F
021E:  BTFSC  03.2
021F:  BSF    60.7
0220:  MOVF   5D,W
0221:  ADDWF  79,F
0222:  BTFSS  03.0
0223:  GOTO   227
0224:  INCF   78,F
0225:  BTFSC  03.2
0226:  BSF    60.7
0227:  MOVF   5C,W
0228:  MOVWF  59
0229:  BSF    59.7
022A:  MOVF   59,W
022B:  ADDWF  78,F
022C:  BTFSC  03.0
022D:  BSF    60.7
022E:  RLF    60,F
022F:  RRF    78,F
0230:  RRF    79,F
0231:  RRF    7A,F
0232:  RRF    63,F
0233:  RRF    62,F
0234:  RRF    61,F
0235:  BCF    03.0
0236:  DECFSZ 5F,F
0237:  GOTO   213
0238:  MOVLW  01
0239:  ADDWF  77,F
023A:  BTFSC  03.0
023B:  GOTO   260
023C:  BTFSC  78.7
023D:  GOTO   245
023E:  RLF    63,F
023F:  RLF    7A,F
0240:  RLF    79,F
0241:  RLF    78,F
0242:  DECF   77,F
0243:  BTFSC  03.2
0244:  GOTO   260
0245:  BTFSS  63.7
0246:  GOTO   256
0247:  INCF   7A,F
0248:  BTFSS  03.2
0249:  GOTO   256
024A:  INCF   79,F
024B:  BTFSS  03.2
024C:  GOTO   256
024D:  INCF   78,F
024E:  BTFSS  03.2
024F:  GOTO   256
0250:  RRF    78,F
0251:  RRF    79,F
0252:  RRF    7A,F
0253:  INCF   77,F
0254:  BTFSC  03.2
0255:  GOTO   260
0256:  MOVF   58,W
0257:  MOVWF  60
0258:  MOVF   5C,W
0259:  XORWF  60,F
025A:  BTFSS  60.7
025B:  GOTO   25E
025C:  BSF    78.7
025D:  GOTO   264
025E:  BCF    78.7
025F:  GOTO   264
0260:  CLRF   77
0261:  CLRF   78
0262:  CLRF   79
0263:  CLRF   7A
0264:  RETURN
*
031A:  MOVLW  8E
031B:  MOVWF  77
031C:  MOVF   50,W
031D:  MOVWF  78
031E:  MOVF   4F,W
031F:  MOVWF  79
0320:  CLRF   7A
0321:  MOVF   78,F
0322:  BTFSS  03.2
0323:  GOTO   32E
0324:  MOVF   79,W
0325:  MOVWF  78
0326:  CLRF   79
0327:  MOVLW  08
0328:  SUBWF  77,F
0329:  MOVF   78,F
032A:  BTFSS  03.2
032B:  GOTO   32E
032C:  CLRF   77
032D:  GOTO   336
032E:  BCF    03.0
032F:  BTFSC  78.7
0330:  GOTO   335
0331:  RLF    79,F
0332:  RLF    78,F
0333:  DECF   77,F
0334:  GOTO   32E
0335:  BCF    78.7
*
0391:  MOVF   51,W
0392:  BTFSC  03.2
0393:  GOTO   456
0394:  MOVWF  5D
0395:  MOVF   55,W
0396:  BTFSC  03.2
0397:  GOTO   456
0398:  SUBWF  5D,F
0399:  BTFSS  03.0
039A:  GOTO   3A0
039B:  MOVLW  7F
039C:  ADDWF  5D,F
039D:  BTFSC  03.0
039E:  GOTO   456
039F:  GOTO   3A6
03A0:  MOVLW  81
03A1:  SUBWF  5D,F
03A2:  BTFSS  03.0
03A3:  GOTO   456
03A4:  BTFSC  03.2
03A5:  GOTO   456
03A6:  MOVF   5D,W
03A7:  MOVWF  77
03A8:  CLRF   78
03A9:  CLRF   79
03AA:  CLRF   7A
03AB:  CLRF   5C
03AC:  MOVF   52,W
03AD:  MOVWF  5B
03AE:  BSF    5B.7
03AF:  MOVF   53,W
03B0:  MOVWF  5A
03B1:  MOVF   54,W
03B2:  MOVWF  59
03B3:  MOVLW  19
03B4:  MOVWF  5D
03B5:  MOVF   58,W
03B6:  SUBWF  59,F
03B7:  BTFSC  03.0
03B8:  GOTO   3C9
03B9:  MOVLW  01
03BA:  SUBWF  5A,F
03BB:  BTFSC  03.0
03BC:  GOTO   3C9
03BD:  SUBWF  5B,F
03BE:  BTFSC  03.0
03BF:  GOTO   3C9
03C0:  SUBWF  5C,F
03C1:  BTFSC  03.0
03C2:  GOTO   3C9
03C3:  INCF   5C,F
03C4:  INCF   5B,F
03C5:  INCF   5A,F
03C6:  MOVF   58,W
03C7:  ADDWF  59,F
03C8:  GOTO   3FB
03C9:  MOVF   57,W
03CA:  SUBWF  5A,F
03CB:  BTFSC  03.0
03CC:  GOTO   3E4
03CD:  MOVLW  01
03CE:  SUBWF  5B,F
03CF:  BTFSC  03.0
03D0:  GOTO   3E4
03D1:  SUBWF  5C,F
03D2:  BTFSC  03.0
03D3:  GOTO   3E4
03D4:  INCF   5C,F
03D5:  INCF   5B,F
03D6:  MOVF   57,W
03D7:  ADDWF  5A,F
03D8:  MOVF   58,W
03D9:  ADDWF  59,F
03DA:  BTFSS  03.0
03DB:  GOTO   3FB
03DC:  INCF   5A,F
03DD:  BTFSS  03.2
03DE:  GOTO   3FB
03DF:  INCF   5B,F
03E0:  BTFSS  03.2
03E1:  GOTO   3FB
03E2:  INCF   5C,F
03E3:  GOTO   3FB
03E4:  MOVF   56,W
03E5:  IORLW  80
03E6:  SUBWF  5B,F
03E7:  BTFSC  03.0
03E8:  GOTO   3FA
03E9:  MOVLW  01
03EA:  SUBWF  5C,F
03EB:  BTFSC  03.0
03EC:  GOTO   3FA
03ED:  INCF   5C,F
03EE:  MOVF   56,W
03EF:  IORLW  80
03F0:  ADDWF  5B,F
03F1:  MOVF   57,W
03F2:  ADDWF  5A,F
03F3:  BTFSS  03.0
03F4:  GOTO   3D8
03F5:  INCF   5B,F
03F6:  BTFSS  03.2
03F7:  GOTO   3D8
03F8:  INCF   5C,F
03F9:  GOTO   3D8
03FA:  BSF    7A.0
03FB:  DECFSZ 5D,F
03FC:  GOTO   3FE
03FD:  GOTO   409
03FE:  BCF    03.0
03FF:  RLF    59,F
0400:  RLF    5A,F
0401:  RLF    5B,F
0402:  RLF    5C,F
0403:  BCF    03.0
0404:  RLF    7A,F
0405:  RLF    79,F
0406:  RLF    78,F
0407:  RLF    5E,F
0408:  GOTO   3B5
0409:  BTFSS  5E.0
040A:  GOTO   411
040B:  BCF    03.0
040C:  RRF    78,F
040D:  RRF    79,F
040E:  RRF    7A,F
040F:  RRF    5E,F
0410:  GOTO   414
0411:  DECF   77,F
0412:  BTFSC  03.2
0413:  GOTO   456
0414:  BTFSC  5E.7
0415:  GOTO   43D
0416:  BCF    03.0
0417:  RLF    59,F
0418:  RLF    5A,F
0419:  RLF    5B,F
041A:  RLF    5C,F
041B:  MOVF   58,W
041C:  SUBWF  59,F
041D:  BTFSC  03.0
041E:  GOTO   429
041F:  MOVLW  01
0420:  SUBWF  5A,F
0421:  BTFSC  03.0
0422:  GOTO   429
0423:  SUBWF  5B,F
0424:  BTFSC  03.0
0425:  GOTO   429
0426:  SUBWF  5C,F
0427:  BTFSS  03.0
0428:  GOTO   44C
0429:  MOVF   57,W
042A:  SUBWF  5A,F
042B:  BTFSC  03.0
042C:  GOTO   434
042D:  MOVLW  01
042E:  SUBWF  5B,F
042F:  BTFSC  03.0
0430:  GOTO   434
0431:  SUBWF  5C,F
0432:  BTFSS  03.0
0433:  GOTO   44C
0434:  MOVF   56,W
0435:  IORLW  80
0436:  SUBWF  5B,F
0437:  BTFSC  03.0
0438:  GOTO   43D
0439:  MOVLW  01
043A:  SUBWF  5C,F
043B:  BTFSS  03.0
043C:  GOTO   44C
043D:  INCF   7A,F
043E:  BTFSS  03.2
043F:  GOTO   44C
0440:  INCF   79,F
0441:  BTFSS  03.2
0442:  GOTO   44C
0443:  INCF   78,F
0444:  BTFSS  03.2
0445:  GOTO   44C
0446:  INCF   77,F
0447:  BTFSC  03.2
0448:  GOTO   456
0449:  RRF    78,F
044A:  RRF    79,F
044B:  RRF    7A,F
044C:  MOVF   52,W
044D:  MOVWF  5D
044E:  MOVF   56,W
044F:  XORWF  5D,F
0450:  BTFSS  5D.7
0451:  GOTO   454
0452:  BSF    78.7
0453:  GOTO   45A
0454:  BCF    78.7
0455:  GOTO   45A
0456:  CLRF   77
0457:  CLRF   78
0458:  CLRF   79
0459:  CLRF   7A
*
0481:  BCF    0A.0
0482:  BCF    0A.1
0483:  BSF    0A.2
0484:  ADDWF  02,F
0485:  GOTO   26C
0486:  GOTO   273
0487:  GOTO   27A
0488:  GOTO   281
0489:  BCF    0A.0
048A:  BCF    0A.1
048B:  BSF    0A.2
048C:  ADDWF  02,F
048D:  GOTO   291
048E:  GOTO   298
048F:  GOTO   29F
0490:  GOTO   2A6
0491:  BCF    0A.0
0492:  BCF    0A.1
0493:  BSF    0A.2
0494:  ADDWF  02,F
0495:  GOTO   2B3
0496:  GOTO   2BB
0497:  GOTO   2C3
0498:  GOTO   2CB
0499:  BCF    0A.0
049A:  BCF    0A.1
049B:  BSF    0A.2
049C:  ADDWF  02,F
049D:  GOTO   2DF
049E:  GOTO   2E7
049F:  GOTO   2EF
04A0:  GOTO   2F7
04A1:  MOVF   4F,W
04A2:  MOVWF  56
04A3:  MOVF   53,W
04A4:  XORWF  56,F
04A5:  BTFSS  56.7
04A6:  GOTO   4AC
04A7:  BCF    03.2
04A8:  BCF    03.0
04A9:  BTFSC  4F.7
04AA:  BSF    03.0
04AB:  GOTO   4DF
04AC:  MOVF   4F,W
04AD:  MOVWF  56
04AE:  MOVF   52,W
04AF:  MOVWF  57
04B0:  MOVF   4E,W
04B1:  SUBWF  57,F
04B2:  BTFSC  03.2
04B3:  GOTO   4BA
04B4:  BTFSS  56.7
04B5:  GOTO   4DF
04B6:  MOVF   03,W
04B7:  XORLW  01
04B8:  MOVWF  03
04B9:  GOTO   4DF
04BA:  MOVF   53,W
04BB:  MOVWF  57
04BC:  MOVF   4F,W
04BD:  SUBWF  57,F
04BE:  BTFSC  03.2
04BF:  GOTO   4C6
04C0:  BTFSS  56.7
04C1:  GOTO   4DF
04C2:  MOVF   03,W
04C3:  XORLW  01
04C4:  MOVWF  03
04C5:  GOTO   4DF
04C6:  MOVF   54,W
04C7:  MOVWF  57
04C8:  MOVF   50,W
04C9:  SUBWF  57,F
04CA:  BTFSC  03.2
04CB:  GOTO   4D2
04CC:  BTFSS  56.7
04CD:  GOTO   4DF
04CE:  MOVF   03,W
04CF:  XORLW  01
04D0:  MOVWF  03
04D1:  GOTO   4DF
04D2:  MOVF   55,W
04D3:  MOVWF  57
04D4:  MOVF   51,W
04D5:  SUBWF  57,F
04D6:  BTFSC  03.2
04D7:  GOTO   4DE
04D8:  BTFSS  56.7
04D9:  GOTO   4DF
04DA:  MOVF   03,W
04DB:  XORLW  01
04DC:  MOVWF  03
04DD:  GOTO   4DF
04DE:  BCF    03.0
04DF:  RETURN
04E0:  BTFSC  03.1
04E1:  GOTO   4E5
04E2:  MOVLW  5F
04E3:  MOVWF  04
04E4:  BCF    03.7
04E5:  CLRF   77
04E6:  CLRF   78
04E7:  CLRF   79
04E8:  CLRF   7A
04E9:  CLRF   5F
04EA:  CLRF   60
04EB:  CLRF   61
04EC:  CLRF   62
04ED:  MOVF   5E,W
04EE:  IORWF  5D,W
04EF:  IORWF  5C,W
04F0:  IORWF  5B,W
04F1:  BTFSC  03.2
04F2:  GOTO   523
04F3:  MOVLW  20
04F4:  MOVWF  63
04F5:  BCF    03.0
04F6:  RLF    57,F
04F7:  RLF    58,F
04F8:  RLF    59,F
04F9:  RLF    5A,F
04FA:  RLF    5F,F
04FB:  RLF    60,F
04FC:  RLF    61,F
04FD:  RLF    62,F
04FE:  MOVF   5E,W
04FF:  SUBWF  62,W
0500:  BTFSS  03.2
0501:  GOTO   50C
0502:  MOVF   5D,W
0503:  SUBWF  61,W
0504:  BTFSS  03.2
0505:  GOTO   50C
0506:  MOVF   5C,W
0507:  SUBWF  60,W
0508:  BTFSS  03.2
0509:  GOTO   50C
050A:  MOVF   5B,W
050B:  SUBWF  5F,W
050C:  BTFSS  03.0
050D:  GOTO   51D
050E:  MOVF   5B,W
050F:  SUBWF  5F,F
0510:  MOVF   5C,W
0511:  BTFSS  03.0
0512:  INCFSZ 5C,W
0513:  SUBWF  60,F
0514:  MOVF   5D,W
0515:  BTFSS  03.0
0516:  INCFSZ 5D,W
0517:  SUBWF  61,F
0518:  MOVF   5E,W
0519:  BTFSS  03.0
051A:  INCFSZ 5E,W
051B:  SUBWF  62,F
051C:  BSF    03.0
051D:  RLF    77,F
051E:  RLF    78,F
051F:  RLF    79,F
0520:  RLF    7A,F
0521:  DECFSZ 63,F
0522:  GOTO   4F5
0523:  MOVF   5F,W
0524:  MOVWF  00
0525:  INCF   04,F
0526:  MOVF   60,W
0527:  MOVWF  00
0528:  INCF   04,F
0529:  MOVF   61,W
052A:  MOVWF  00
052B:  INCF   04,F
052C:  MOVF   62,W
052D:  MOVWF  00
052E:  RETURN
052F:  MOVF   04,W
0530:  MOVWF  4F
0531:  MOVF   4E,W
0532:  MOVWF  51
0533:  BTFSC  03.2
0534:  GOTO   54E
0535:  MOVF   4D,W
0536:  MOVWF  5A
0537:  MOVF   4C,W
0538:  MOVWF  59
0539:  MOVF   4B,W
053A:  MOVWF  58
053B:  MOVF   4A,W
053C:  MOVWF  57
053D:  CLRF   5E
053E:  CLRF   5D
053F:  MOVLW  20
0540:  MOVWF  5C
0541:  MOVLW  82
0542:  MOVWF  5B
0543:  CALL   1F0
0544:  MOVF   7A,W
0545:  MOVWF  4D
0546:  MOVF   79,W
0547:  MOVWF  4C
0548:  MOVF   78,W
0549:  MOVWF  4B
054A:  MOVF   77,W
054B:  MOVWF  4A
054C:  DECFSZ 51,F
054D:  GOTO   535
054E:  MOVF   4D,W
054F:  MOVWF  5A
0550:  MOVF   4C,W
0551:  MOVWF  59
0552:  MOVF   4B,W
0553:  MOVWF  58
0554:  MOVF   4A,W
0555:  MOVWF  57
0556:  MOVF   57,W
0557:  SUBLW  B6
0558:  MOVWF  57
0559:  CLRF   7A
055A:  MOVF   58,W
055B:  MOVWF  5B
055C:  BSF    58.7
055D:  BCF    03.0
055E:  RRF    58,F
055F:  RRF    59,F
0560:  RRF    5A,F
0561:  RRF    7A,F
0562:  RRF    79,F
0563:  RRF    78,F
0564:  RRF    77,F
0565:  DECFSZ 57,F
0566:  GOTO   55D
0567:  BTFSS  5B.7
0568:  GOTO   574
0569:  COMF   77,F
056A:  COMF   78,F
056B:  COMF   79,F
056C:  COMF   7A,F
056D:  INCF   77,F
056E:  BTFSC  03.2
056F:  INCF   78,F
0570:  BTFSC  03.2
0571:  INCF   79,F
0572:  BTFSC  03.2
0573:  INCF   7A,F
0574:  MOVF   7A,W
0575:  MOVWF  4D
0576:  MOVF   79,W
0577:  MOVWF  4C
0578:  MOVF   78,W
0579:  MOVWF  4B
057A:  MOVF   77,W
057B:  MOVWF  4A
057C:  BTFSS  4D.7
057D:  GOTO   58B
057E:  DECF   4F,F
057F:  BSF    4F.5
0580:  COMF   4A,F
0581:  COMF   4B,F
0582:  COMF   4C,F
0583:  COMF   4D,F
0584:  INCF   4A,F
0585:  BTFSC  03.2
0586:  INCF   4B,F
0587:  BTFSC  03.2
0588:  INCF   4C,F
0589:  BTFSC  03.2
058A:  INCF   4D,F
058B:  MOVLW  3B
058C:  MOVWF  56
058D:  MOVLW  9A
058E:  MOVWF  55
058F:  MOVLW  CA
0590:  MOVWF  54
0591:  CLRF   53
0592:  MOVLW  0A
0593:  MOVWF  51
0594:  MOVF   4E,W
0595:  BTFSC  03.2
0596:  INCF   4F,F
0597:  BSF    03.1
0598:  MOVLW  4A
0599:  MOVWF  04
059A:  BCF    03.7
059B:  MOVF   4D,W
059C:  MOVWF  5A
059D:  MOVF   4C,W
059E:  MOVWF  59
059F:  MOVF   4B,W
05A0:  MOVWF  58
05A1:  MOVF   4A,W
05A2:  MOVWF  57
05A3:  MOVF   56,W
05A4:  MOVWF  5E
05A5:  MOVF   55,W
05A6:  MOVWF  5D
05A7:  MOVF   54,W
05A8:  MOVWF  5C
05A9:  MOVF   53,W
05AA:  MOVWF  5B
05AB:  CALL   4E0
05AC:  MOVF   78,W
05AD:  MOVF   77,F
05AE:  BTFSS  03.2
05AF:  GOTO   5C3
05B0:  INCF   4E,W
05B1:  SUBWF  51,W
05B2:  BTFSC  03.2
05B3:  GOTO   5C3
05B4:  MOVF   4F,W
05B5:  BTFSC  03.2
05B6:  GOTO   5C5
05B7:  ANDLW  0F
05B8:  SUBWF  51,W
05B9:  BTFSC  03.2
05BA:  GOTO   5BD
05BB:  BTFSC  03.0
05BC:  GOTO   5F5
05BD:  BTFSC  4F.7
05BE:  GOTO   5F5
05BF:  BTFSC  4F.6
05C0:  GOTO   5C5
05C1:  MOVLW  20
05C2:  GOTO   5F1
05C3:  MOVLW  20
05C4:  ANDWF  4F,F
05C5:  BTFSS  4F.5
05C6:  GOTO   5D3
05C7:  BCF    4F.5
05C8:  MOVF   4E,W
05C9:  BTFSS  03.2
05CA:  DECF   4F,F
05CB:  MOVF   77,W
05CC:  MOVWF  4F
05CD:  MOVLW  2D
05CE:  MOVWF  57
05CF:  CALL   158
05D0:  MOVF   4F,W
05D1:  MOVWF  77
05D2:  CLRF   4F
05D3:  MOVF   4E,W
05D4:  SUBWF  51,W
05D5:  BTFSS  03.2
05D6:  GOTO   5E1
05D7:  MOVF   77,W
05D8:  MOVWF  4F
05D9:  MOVLW  2E
05DA:  MOVWF  57
05DB:  CALL   158
05DC:  MOVF   4F,W
05DD:  MOVWF  77
05DE:  MOVLW  20
05DF:  ANDWF  4F,F
05E0:  MOVLW  00
05E1:  MOVLW  30
05E2:  BTFSS  4F.5
05E3:  GOTO   5F1
05E4:  BCF    4F.5
05E5:  MOVF   4E,W
05E6:  BTFSS  03.2
05E7:  DECF   4F,F
05E8:  MOVF   77,W
05E9:  MOVWF  4F
05EA:  MOVLW  2D
05EB:  MOVWF  57
05EC:  CALL   158
05ED:  MOVF   4F,W
05EE:  MOVWF  77
05EF:  CLRF   4F
05F0:  MOVLW  30
05F1:  ADDWF  77,F
05F2:  MOVF   77,W
05F3:  MOVWF  57
05F4:  CALL   158
05F5:  BCF    03.1
05F6:  MOVF   56,W
05F7:  MOVWF  5A
05F8:  MOVF   55,W
05F9:  MOVWF  59
05FA:  MOVF   54,W
05FB:  MOVWF  58
05FC:  MOVF   53,W
05FD:  MOVWF  57
05FE:  CLRF   5E
05FF:  CLRF   5D
0600:  CLRF   5C
0601:  MOVLW  0A
0602:  MOVWF  5B
0603:  CALL   4E0
0604:  MOVF   7A,W
0605:  MOVWF  56
0606:  MOVF   79,W
0607:  MOVWF  55
0608:  MOVF   78,W
0609:  MOVWF  54
060A:  MOVF   77,W
060B:  MOVWF  53
060C:  DECFSZ 51,F
060D:  GOTO   597
060E:  RETURN
060F:  MOVF   0B,W
0610:  MOVWF  4B
0611:  BCF    0B.7
0612:  BSF    03.5
0613:  BSF    03.6
0614:  BSF    0C.7
0615:  BSF    0C.0
0616:  NOP
0617:  NOP
0618:  BCF    03.5
0619:  BCF    03.6
061A:  BTFSC  4B.7
061B:  BSF    0B.7
061C:  BTFSC  03.0
061D:  GOTO   646
061E:  BSF    03.6
061F:  MOVF   0C,W
0620:  ANDLW  7F
0621:  BCF    03.6
0622:  MOVWF  4B
0623:  BSF    03.6
0624:  MOVF   0D,W
0625:  BCF    03.6
0626:  MOVWF  4C
0627:  BSF    03.6
0628:  MOVF   0F,W
0629:  BCF    03.6
062A:  MOVWF  4D
062B:  MOVF   4B,W
062C:  MOVWF  57
062D:  CALL   158
062E:  MOVF   4C,W
062F:  BSF    03.6
0630:  MOVWF  0D
0631:  BCF    03.6
0632:  MOVF   4D,W
0633:  BSF    03.6
0634:  MOVWF  0F
0635:  BCF    03.6
0636:  MOVF   0B,W
0637:  MOVWF  4E
0638:  BCF    0B.7
0639:  BSF    03.5
063A:  BSF    03.6
063B:  BSF    0C.7
063C:  BSF    0C.0
063D:  NOP
063E:  NOP
063F:  BCF    03.5
0640:  BCF    03.6
0641:  BTFSC  4E.7
0642:  BSF    0B.7
0643:  DECFSZ 4A,F
0644:  GOTO   646
0645:  GOTO   665
0646:  BSF    03.6
0647:  RLF    0C,W
0648:  RLF    0E,W
0649:  ANDLW  7F
064A:  BCF    03.6
064B:  MOVWF  4B
064C:  BSF    03.6
064D:  MOVF   0D,W
064E:  BCF    03.6
064F:  MOVWF  4C
0650:  BSF    03.6
0651:  MOVF   0F,W
0652:  BCF    03.6
0653:  MOVWF  4D
0654:  MOVF   4B,W
0655:  MOVWF  57
0656:  CALL   158
0657:  MOVF   4C,W
0658:  BSF    03.6
0659:  MOVWF  0D
065A:  BCF    03.6
065B:  MOVF   4D,W
065C:  BSF    03.6
065D:  MOVWF  0F
065E:  INCF   0D,F
065F:  BTFSC  03.2
0660:  INCF   0F,F
0661:  BCF    03.0
0662:  BCF    03.6
0663:  DECFSZ 4A,F
0664:  GOTO   60F
0665:  RETURN
*
0800:  MOVLW  80
0801:  BTFSC  03.1
0802:  XORWF  4F,F
0803:  CLRF   54
0804:  CLRF   55
0805:  MOVF   4B,W
0806:  MOVWF  53
0807:  MOVF   4F,W
0808:  XORWF  53,F
0809:  MOVF   4A,W
080A:  BTFSC  03.2
080B:  GOTO   0F1
080C:  MOVWF  52
080D:  MOVWF  77
080E:  MOVF   4E,W
080F:  BTFSC  03.2
0810:  GOTO   0FA
0811:  SUBWF  52,F
0812:  BTFSC  03.2
0813:  GOTO   096
0814:  BTFSC  03.0
0815:  GOTO   017
0816:  GOTO   054
0817:  MOVF   4F,W
0818:  MOVWF  58
0819:  BSF    58.7
081A:  MOVF   50,W
081B:  MOVWF  57
081C:  MOVF   51,W
081D:  MOVWF  56
081E:  CLRF   55
081F:  BCF    03.0
0820:  RRF    58,F
0821:  RRF    57,F
0822:  RRF    56,F
0823:  RRF    55,F
0824:  DECFSZ 52,F
0825:  GOTO   01E
0826:  BTFSS  53.7
0827:  GOTO   02B
0828:  BSF    54.0
0829:  GOTO   10E
082A:  BCF    54.0
082B:  BCF    52.0
082C:  BSF    54.4
082D:  MOVLW  4D
082E:  MOVWF  04
082F:  BCF    03.7
0830:  GOTO   124
0831:  BCF    54.4
0832:  BTFSC  53.7
0833:  GOTO   03E
0834:  BTFSS  52.0
0835:  GOTO   049
0836:  RRF    58,F
0837:  RRF    57,F
0838:  RRF    56,F
0839:  RRF    55,F
083A:  INCF   77,F
083B:  BTFSC  03.2
083C:  GOTO   109
083D:  GOTO   049
083E:  BTFSC  58.7
083F:  GOTO   04C
0840:  BCF    03.0
0841:  RLF    55,F
0842:  RLF    56,F
0843:  RLF    57,F
0844:  RLF    58,F
0845:  DECF   77,F
0846:  BTFSC  03.2
0847:  GOTO   109
0848:  GOTO   03E
0849:  BSF    54.6
084A:  GOTO   0B6
084B:  BCF    54.6
084C:  MOVF   4B,W
084D:  MOVWF  53
084E:  BTFSS  53.7
084F:  GOTO   052
0850:  BSF    58.7
0851:  GOTO   102
0852:  BCF    58.7
0853:  GOTO   102
0854:  MOVF   4E,W
0855:  MOVWF  52
0856:  MOVWF  77
0857:  MOVF   4A,W
0858:  SUBWF  52,F
0859:  MOVF   4B,W
085A:  MOVWF  58
085B:  BSF    58.7
085C:  MOVF   4C,W
085D:  MOVWF  57
085E:  MOVF   4D,W
085F:  MOVWF  56
0860:  CLRF   55
0861:  BCF    03.0
0862:  RRF    58,F
0863:  RRF    57,F
0864:  RRF    56,F
0865:  RRF    55,F
0866:  DECFSZ 52,F
0867:  GOTO   060
0868:  BTFSS  53.7
0869:  GOTO   06D
086A:  BSF    54.1
086B:  GOTO   10E
086C:  BCF    54.1
086D:  BCF    52.0
086E:  BSF    54.5
086F:  MOVLW  51
0870:  MOVWF  04
0871:  BCF    03.7
0872:  GOTO   124
0873:  BCF    54.5
0874:  BTFSC  53.7
0875:  GOTO   080
0876:  BTFSS  52.0
0877:  GOTO   08B
0878:  RRF    58,F
0879:  RRF    57,F
087A:  RRF    56,F
087B:  RRF    55,F
087C:  INCF   77,F
087D:  BTFSC  03.2
087E:  GOTO   109
087F:  GOTO   08B
0880:  BTFSC  58.7
0881:  GOTO   08E
0882:  BCF    03.0
0883:  RLF    55,F
0884:  RLF    56,F
0885:  RLF    57,F
0886:  RLF    58,F
0887:  DECF   77,F
0888:  BTFSC  03.2
0889:  GOTO   109
088A:  GOTO   080
088B:  BSF    54.7
088C:  GOTO   0B6
088D:  BCF    54.7
088E:  MOVF   4F,W
088F:  MOVWF  53
0890:  BTFSS  53.7
0891:  GOTO   094
0892:  BSF    58.7
0893:  GOTO   102
0894:  BCF    58.7
0895:  GOTO   102
0896:  MOVF   4F,W
0897:  MOVWF  58
0898:  BSF    58.7
0899:  MOVF   50,W
089A:  MOVWF  57
089B:  MOVF   51,W
089C:  MOVWF  56
089D:  BTFSS  53.7
089E:  GOTO   0A3
089F:  BCF    58.7
08A0:  BSF    54.2
08A1:  GOTO   10E
08A2:  BCF    54.2
08A3:  CLRF   55
08A4:  BCF    52.0
08A5:  MOVLW  4D
08A6:  MOVWF  04
08A7:  BCF    03.7
08A8:  GOTO   124
08A9:  BTFSC  53.7
08AA:  GOTO   0CC
08AB:  MOVF   4B,W
08AC:  MOVWF  53
08AD:  BTFSS  52.0
08AE:  GOTO   0B6
08AF:  RRF    58,F
08B0:  RRF    57,F
08B1:  RRF    56,F
08B2:  RRF    55,F
08B3:  INCF   77,F
08B4:  BTFSC  03.2
08B5:  GOTO   109
08B6:  BTFSS  55.7
08B7:  GOTO   0C7
08B8:  INCF   56,F
08B9:  BTFSS  03.2
08BA:  GOTO   0C7
08BB:  INCF   57,F
08BC:  BTFSS  03.2
08BD:  GOTO   0C7
08BE:  INCF   58,F
08BF:  BTFSS  03.2
08C0:  GOTO   0C7
08C1:  RRF    58,F
08C2:  RRF    57,F
08C3:  RRF    56,F
08C4:  INCF   77,F
08C5:  BTFSC  03.2
08C6:  GOTO   109
08C7:  BTFSC  54.6
08C8:  GOTO   04B
08C9:  BTFSC  54.7
08CA:  GOTO   08D
08CB:  GOTO   0EB
08CC:  MOVLW  80
08CD:  XORWF  58,F
08CE:  BTFSS  58.7
08CF:  GOTO   0D4
08D0:  GOTO   10E
08D1:  MOVF   4F,W
08D2:  MOVWF  53
08D3:  GOTO   0E1
08D4:  MOVF   4B,W
08D5:  MOVWF  53
08D6:  MOVF   58,F
08D7:  BTFSS  03.2
08D8:  GOTO   0E1
08D9:  MOVF   57,F
08DA:  BTFSS  03.2
08DB:  GOTO   0E1
08DC:  MOVF   56,F
08DD:  BTFSS  03.2
08DE:  GOTO   0E1
08DF:  CLRF   77
08E0:  GOTO   102
08E1:  BTFSC  58.7
08E2:  GOTO   0EB
08E3:  BCF    03.0
08E4:  RLF    55,F
08E5:  RLF    56,F
08E6:  RLF    57,F
08E7:  RLF    58,F
08E8:  DECFSZ 77,F
08E9:  GOTO   0E1
08EA:  GOTO   109
08EB:  BTFSS  53.7
08EC:  GOTO   0EF
08ED:  BSF    58.7
08EE:  GOTO   102
08EF:  BCF    58.7
08F0:  GOTO   102
08F1:  MOVF   4E,W
08F2:  MOVWF  77
08F3:  MOVF   4F,W
08F4:  MOVWF  58
08F5:  MOVF   50,W
08F6:  MOVWF  57
08F7:  MOVF   51,W
08F8:  MOVWF  56
08F9:  GOTO   102
08FA:  MOVF   4A,W
08FB:  MOVWF  77
08FC:  MOVF   4B,W
08FD:  MOVWF  58
08FE:  MOVF   4C,W
08FF:  MOVWF  57
0900:  MOVF   4D,W
0901:  MOVWF  56
0902:  MOVF   58,W
0903:  MOVWF  78
0904:  MOVF   57,W
0905:  MOVWF  79
0906:  MOVF   56,W
0907:  MOVWF  7A
0908:  GOTO   143
0909:  CLRF   77
090A:  CLRF   78
090B:  CLRF   79
090C:  CLRF   7A
090D:  GOTO   143
090E:  CLRF   55
090F:  COMF   56,F
0910:  COMF   57,F
0911:  COMF   58,F
0912:  COMF   55,F
0913:  INCF   55,F
0914:  BTFSS  03.2
0915:  GOTO   11D
0916:  INCF   56,F
0917:  BTFSS  03.2
0918:  GOTO   11D
0919:  INCF   57,F
091A:  BTFSS  03.2
091B:  GOTO   11D
091C:  INCF   58,F
091D:  BTFSC  54.0
091E:  GOTO   02A
091F:  BTFSC  54.1
0920:  GOTO   06C
0921:  BTFSC  54.2
0922:  GOTO   0A2
0923:  GOTO   0D1
0924:  MOVF   00,W
0925:  ADDWF  56,F
0926:  BTFSS  03.0
0927:  GOTO   12E
0928:  INCF   57,F
0929:  BTFSS  03.2
092A:  GOTO   12E
092B:  INCF   58,F
092C:  BTFSC  03.2
092D:  BSF    52.0
092E:  DECF   04,F
092F:  MOVF   00,W
0930:  ADDWF  57,F
0931:  BTFSS  03.0
0932:  GOTO   136
0933:  INCF   58,F
0934:  BTFSC  03.2
0935:  BSF    52.0
0936:  DECF   04,F
0937:  MOVF   00,W
0938:  BTFSC  00.7
0939:  GOTO   13B
093A:  XORLW  80
093B:  ADDWF  58,F
093C:  BTFSC  03.0
093D:  BSF    52.0
093E:  BTFSC  54.4
093F:  GOTO   031
0940:  BTFSC  54.5
0941:  GOTO   073
0942:  GOTO   0A9
0943:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20000000)
*
002F:  MOVLW  58
0030:  MOVWF  04
0031:  BCF    03.7
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   042
0035:  MOVLW  06
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  7B
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  DECFSZ 00,F
0041:  GOTO   035
0042:  RETURN
.................... 
.................... 
.................... #include <stdbool.h> 
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                          stdbool.h                                ////
.................... ////                                                                   ////
.................... //// Standard boolean definitions                                      ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2012 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __STDBOOL_H__
.................... #define __STDBOOL_H__
.................... 
.................... #if !getenv("CASE")
....................    // remove TRUE and FALSE added by CCS's device .h file, only if
....................    // compiler has case sensitivty off.
.................... 
....................    #if defined(TRUE)
....................       #undef TRUE
....................    #endif
....................    
....................    #if defined(FALSE)
....................       #undef FALSE
....................    #endif
.................... #endif
.................... 
.................... typedef int1   bool;
.................... #define true   1
.................... #define false  0
.................... #define __bool_true_false_are_defined  1
.................... 
.................... #endif
.................... 
.................... 
.................... #define LCD_RS_PIN       PIN_E0
.................... #define LCD_RW_PIN       PIN_E1
.................... #define LCD_ENABLE_PIN   PIN_E2
.................... #define LCD_DATA4        PIN_D4
.................... #define LCD_DATA5        PIN_D5
.................... #define LCD_DATA6        PIN_D6
.................... #define LCD_DATA7        PIN_D7 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
00AA:  BSF    08.4
....................    output_float(LCD_DATA5);
00AB:  BSF    08.5
....................    output_float(LCD_DATA6);
00AC:  BSF    08.6
....................    output_float(LCD_DATA7);
00AD:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00AE:  BCF    03.5
00AF:  BSF    09.1
00B0:  BSF    03.5
00B1:  BCF    09.1
....................    delay_cycles(1);
00B2:  NOP
....................    lcd_output_enable(1);
00B3:  BCF    03.5
00B4:  BSF    09.2
00B5:  BSF    03.5
00B6:  BCF    09.2
....................    delay_cycles(1);
00B7:  NOP
....................    high = lcd_read_nibble();
00B8:  BCF    03.5
00B9:  CALL   071
00BA:  MOVF   78,W
00BB:  MOVWF  5F
....................       
....................    lcd_output_enable(0);
00BC:  BCF    09.2
00BD:  BSF    03.5
00BE:  BCF    09.2
....................    delay_cycles(1);
00BF:  NOP
....................    lcd_output_enable(1);
00C0:  BCF    03.5
00C1:  BSF    09.2
00C2:  BSF    03.5
00C3:  BCF    09.2
....................    delay_us(1);
00C4:  GOTO   0C5
00C5:  GOTO   0C6
00C6:  NOP
....................    low = lcd_read_nibble();
00C7:  BCF    03.5
00C8:  CALL   071
00C9:  MOVF   78,W
00CA:  MOVWF  5E
....................       
....................    lcd_output_enable(0);
00CB:  BCF    09.2
00CC:  BSF    03.5
00CD:  BCF    09.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00CE:  BCF    08.4
....................    output_drive(LCD_DATA5);
00CF:  BCF    08.5
....................    output_drive(LCD_DATA6);
00D0:  BCF    08.6
....................    output_drive(LCD_DATA7);
00D1:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00D2:  BCF    03.5
00D3:  SWAPF  5F,W
00D4:  MOVWF  77
00D5:  MOVLW  F0
00D6:  ANDWF  77,F
00D7:  MOVF   77,W
00D8:  IORWF  5E,W
00D9:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0071:  CLRF   60
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0072:  BSF    03.5
0073:  BSF    08.4
0074:  MOVLW  00
0075:  BCF    03.5
0076:  BTFSC  08.4
0077:  MOVLW  01
0078:  IORWF  60,F
....................    n |= input(LCD_DATA5) << 1;
0079:  BSF    03.5
007A:  BSF    08.5
007B:  MOVLW  00
007C:  BCF    03.5
007D:  BTFSC  08.5
007E:  MOVLW  01
007F:  MOVWF  77
0080:  BCF    03.0
0081:  RLF    77,F
0082:  MOVF   77,W
0083:  IORWF  60,F
....................    n |= input(LCD_DATA6) << 2;
0084:  BSF    03.5
0085:  BSF    08.6
0086:  MOVLW  00
0087:  BCF    03.5
0088:  BTFSC  08.6
0089:  MOVLW  01
008A:  MOVWF  77
008B:  RLF    77,F
008C:  RLF    77,F
008D:  MOVLW  FC
008E:  ANDWF  77,F
008F:  MOVF   77,W
0090:  IORWF  60,F
....................    n |= input(LCD_DATA7) << 3;
0091:  BSF    03.5
0092:  BSF    08.7
0093:  MOVLW  00
0094:  BCF    03.5
0095:  BTFSC  08.7
0096:  MOVLW  01
0097:  MOVWF  77
0098:  RLF    77,F
0099:  RLF    77,F
009A:  RLF    77,F
009B:  MOVLW  F8
009C:  ANDWF  77,F
009D:  MOVF   77,W
009E:  IORWF  60,F
....................    
....................    return(n);
009F:  MOVF   60,W
00A0:  MOVWF  78
....................   #else
00A1:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0043:  BTFSC  5F.0
0044:  GOTO   047
0045:  BCF    08.4
0046:  GOTO   048
0047:  BSF    08.4
0048:  BSF    03.5
0049:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
004A:  BCF    03.5
004B:  BTFSC  5F.1
004C:  GOTO   04F
004D:  BCF    08.5
004E:  GOTO   050
004F:  BSF    08.5
0050:  BSF    03.5
0051:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0052:  BCF    03.5
0053:  BTFSC  5F.2
0054:  GOTO   057
0055:  BCF    08.6
0056:  GOTO   058
0057:  BSF    08.6
0058:  BSF    03.5
0059:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
005A:  BCF    03.5
005B:  BTFSC  5F.3
005C:  GOTO   05F
005D:  BCF    08.7
005E:  GOTO   060
005F:  BSF    08.7
0060:  BSF    03.5
0061:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0062:  NOP
....................    lcd_output_enable(1);
0063:  BCF    03.5
0064:  BSF    09.2
0065:  BSF    03.5
0066:  BCF    09.2
....................    delay_us(2);
0067:  MOVLW  03
0068:  MOVWF  77
0069:  DECFSZ 77,F
006A:  GOTO   069
....................    lcd_output_enable(0);
006B:  BCF    03.5
006C:  BCF    09.2
006D:  BSF    03.5
006E:  BCF    09.2
006F:  BCF    03.5
0070:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
00A2:  BSF    03.5
00A3:  BCF    09.2
....................    lcd_rs_tris();
00A4:  BCF    09.0
....................    lcd_rw_tris();
00A5:  BCF    09.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
00A6:  BCF    03.5
00A7:  BCF    09.0
00A8:  BSF    03.5
00A9:  BCF    09.0
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00DA:  MOVF   78,W
00DB:  MOVWF  5E
00DC:  BTFSS  5E.7
00DD:  GOTO   0E0
00DE:  BSF    03.5
00DF:  GOTO   0AA
....................    lcd_output_rs(address);
00E0:  MOVF   5C,F
00E1:  BTFSS  03.2
00E2:  GOTO   0E5
00E3:  BCF    09.0
00E4:  GOTO   0E6
00E5:  BSF    09.0
00E6:  BSF    03.5
00E7:  BCF    09.0
....................    delay_cycles(1);
00E8:  NOP
....................    lcd_output_rw(0);
00E9:  BCF    03.5
00EA:  BCF    09.1
00EB:  BSF    03.5
00EC:  BCF    09.1
....................    delay_cycles(1);
00ED:  NOP
....................    lcd_output_enable(0);
00EE:  BCF    03.5
00EF:  BCF    09.2
00F0:  BSF    03.5
00F1:  BCF    09.2
....................    lcd_send_nibble(n >> 4);
00F2:  BCF    03.5
00F3:  SWAPF  5D,W
00F4:  MOVWF  5E
00F5:  MOVLW  0F
00F6:  ANDWF  5E,F
00F7:  MOVF   5E,W
00F8:  MOVWF  5F
00F9:  CALL   043
....................    lcd_send_nibble(n & 0xf);
00FA:  MOVF   5D,W
00FB:  ANDLW  0F
00FC:  MOVWF  5E
00FD:  MOVWF  5F
00FE:  CALL   043
00FF:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
0100:  MOVLW  28
0101:  MOVWF  4B
0102:  MOVLW  0C
0103:  MOVWF  4C
0104:  MOVLW  01
0105:  MOVWF  4D
0106:  MOVLW  06
0107:  MOVWF  4E
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
0108:  BCF    09.2
0109:  BSF    03.5
010A:  BCF    09.2
....................    lcd_output_rs(0);
010B:  BCF    03.5
010C:  BCF    09.0
010D:  BSF    03.5
010E:  BCF    09.0
....................    lcd_output_rw(0);
010F:  BCF    03.5
0110:  BCF    09.1
0111:  BSF    03.5
0112:  BCF    09.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0113:  BCF    08.4
....................    output_drive(LCD_DATA5);
0114:  BCF    08.5
....................    output_drive(LCD_DATA6);
0115:  BCF    08.6
....................    output_drive(LCD_DATA7);
0116:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
0117:  BCF    09.2
....................    lcd_rs_tris();
0118:  BCF    09.0
....................    lcd_rw_tris();
0119:  BCF    09.1
....................  #endif
....................     
....................    delay_ms(15);
011A:  MOVLW  0F
011B:  BCF    03.5
011C:  MOVWF  58
011D:  CALL   02F
....................    for(i=1;i<=3;++i)
011E:  MOVLW  01
011F:  MOVWF  4A
0120:  MOVF   4A,W
0121:  SUBLW  03
0122:  BTFSS  03.0
0123:  GOTO   12C
....................    {
....................        lcd_send_nibble(3);
0124:  MOVLW  03
0125:  MOVWF  5F
0126:  CALL   043
....................        delay_ms(5);
0127:  MOVLW  05
0128:  MOVWF  58
0129:  CALL   02F
012A:  INCF   4A,F
012B:  GOTO   120
....................    }
....................    
....................    lcd_send_nibble(2);
012C:  MOVLW  02
012D:  MOVWF  5F
012E:  CALL   043
....................    delay_ms(5);
012F:  MOVLW  05
0130:  MOVWF  58
0131:  CALL   02F
....................    for(i=0;i<=3;++i)
0132:  CLRF   4A
0133:  MOVF   4A,W
0134:  SUBLW  03
0135:  BTFSS  03.0
0136:  GOTO   143
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
0137:  MOVLW  4B
0138:  ADDWF  4A,W
0139:  MOVWF  04
013A:  BCF    03.7
013B:  MOVF   00,W
013C:  MOVWF  4F
013D:  CLRF   5C
013E:  MOVF   4F,W
013F:  MOVWF  5D
0140:  CALL   0A2
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0141:  INCF   4A,F
0142:  GOTO   133
0143:  BCF    0A.3
0144:  BCF    0A.4
0145:  GOTO   78D (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
0146:  DECFSZ 59,W
0147:  GOTO   149
0148:  GOTO   14C
....................       address=LCD_LINE_TWO;
0149:  MOVLW  40
014A:  MOVWF  5A
014B:  GOTO   14D
....................    else
....................       address=0;
014C:  CLRF   5A
....................      
....................    address+=x-1;
014D:  MOVLW  01
014E:  SUBWF  58,W
014F:  ADDWF  5A,F
....................    lcd_send_byte(0,0x80|address);
0150:  MOVF   5A,W
0151:  IORLW  80
0152:  MOVWF  5B
0153:  CLRF   5C
0154:  MOVF   5B,W
0155:  MOVWF  5D
0156:  CALL   0A2
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0157:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0158:  MOVF   57,W
0159:  XORLW  07
015A:  BTFSC  03.2
015B:  GOTO   166
015C:  XORLW  0B
015D:  BTFSC  03.2
015E:  GOTO   16B
015F:  XORLW  06
0160:  BTFSC  03.2
0161:  GOTO   173
0162:  XORLW  02
0163:  BTFSC  03.2
0164:  GOTO   179
0165:  GOTO   17E
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0166:  MOVLW  01
0167:  MOVWF  58
0168:  MOVWF  59
0169:  CALL   146
016A:  GOTO   183
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
016B:  CLRF   5C
016C:  MOVLW  01
016D:  MOVWF  5D
016E:  CALL   0A2
....................                      delay_ms(2);
016F:  MOVLW  02
0170:  MOVWF  58
0171:  CALL   02F
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0172:  GOTO   183
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0173:  MOVLW  01
0174:  MOVWF  58
0175:  MOVLW  02
0176:  MOVWF  59
0177:  CALL   146
0178:  GOTO   183
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0179:  CLRF   5C
017A:  MOVLW  10
017B:  MOVWF  5D
017C:  CALL   0A2
017D:  GOTO   183
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
017E:  MOVLW  01
017F:  MOVWF  5C
0180:  MOVF   57,W
0181:  MOVWF  5D
0182:  CALL   0A2
....................      #endif
....................    }
0183:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define TRIGGER_1   PIN_C0
.................... #define ECHO_1      input(PIN_C1)
.................... #define TRIGGER_2   PIN_C2
.................... #define ECHO_2      input(PIN_C3)
.................... #define TRIGGER_3   PIN_C4
.................... #define ECHO_3      input(PIN_C5)
.................... #define TRIGGER_4   PIN_C6
.................... #define ECHO_4      input(PIN_C7)
.................... 
.................... #define BUTTON_B0    input(PIN_B0)  
.................... #define BUTTON_B6    input(PIN_B6)  
.................... #define BUTTON_B7    input(PIN_B7)  
.................... 
.................... float threshold = 50;
.................... bool lcd_mode = false;
.................... 
.................... #define buzzer       PIN_D2
.................... 
.................... float distance[4], time[4]; 
.................... 
.................... float measure_distance(int sensor)
.................... {
....................     switch(sensor) {
*
0265:  MOVLW  01
0266:  SUBWF  4A,W
0267:  ADDLW  FC
0268:  BTFSC  03.0
0269:  GOTO   287
026A:  ADDLW  04
026B:  GOTO   481
....................         case 1:
....................             output_high(TRIGGER_1);  
026C:  BCF    45.0
026D:  MOVF   45,W
026E:  BSF    03.5
026F:  MOVWF  07
0270:  BCF    03.5
0271:  BSF    07.0
....................             break;
0272:  GOTO   287
....................         case 2:
....................             output_high(TRIGGER_2);   // B?t Trigger c?a c?m bi?n 2
0273:  BCF    45.2
0274:  MOVF   45,W
0275:  BSF    03.5
0276:  MOVWF  07
0277:  BCF    03.5
0278:  BSF    07.2
....................             break;
0279:  GOTO   287
....................         case 3:
....................             output_high(TRIGGER_3);   // B?t Trigger c?a c?m bi?n 3
027A:  BCF    45.4
027B:  MOVF   45,W
027C:  BSF    03.5
027D:  MOVWF  07
027E:  BCF    03.5
027F:  BSF    07.4
....................             break;
0280:  GOTO   287
....................         case 4:
....................             output_high(TRIGGER_4);   // B?t Trigger c?a c?m bi?n 4
0281:  BCF    45.6
0282:  MOVF   45,W
0283:  BSF    03.5
0284:  MOVWF  07
0285:  BCF    03.5
0286:  BSF    07.6
....................             break;
....................     }
....................     delay_ms(50);
0287:  MOVLW  32
0288:  MOVWF  58
0289:  CALL   02F
....................     switch(sensor) 
028A:  MOVLW  01
028B:  SUBWF  4A,W
028C:  ADDLW  FC
028D:  BTFSC  03.0
028E:  GOTO   2AC
028F:  ADDLW  04
0290:  GOTO   489
....................     {
....................         case 1:
....................             output_low(TRIGGER_1);    // T?t Trigger c?a c?m bi?n 1
0291:  BCF    45.0
0292:  MOVF   45,W
0293:  BSF    03.5
0294:  MOVWF  07
0295:  BCF    03.5
0296:  BCF    07.0
....................             break;
0297:  GOTO   2AC
....................         case 2:
....................             output_low(TRIGGER_2);    // T?t Trigger c?a c?m bi?n 2
0298:  BCF    45.2
0299:  MOVF   45,W
029A:  BSF    03.5
029B:  MOVWF  07
029C:  BCF    03.5
029D:  BCF    07.2
....................             break;
029E:  GOTO   2AC
....................         case 3:
....................             output_low(TRIGGER_3);    // T?t Trigger c?a c?m bi?n 3
029F:  BCF    45.4
02A0:  MOVF   45,W
02A1:  BSF    03.5
02A2:  MOVWF  07
02A3:  BCF    03.5
02A4:  BCF    07.4
....................             break;
02A5:  GOTO   2AC
....................         case 4:
....................             output_low(TRIGGER_4);    // T?t Trigger c?a c?m bi?n 4
02A6:  BCF    45.6
02A7:  MOVF   45,W
02A8:  BSF    03.5
02A9:  MOVWF  07
02AA:  BCF    03.5
02AB:  BCF    07.6
....................             break;
....................     }
.................... 
....................     switch(sensor) 
02AC:  MOVLW  01
02AD:  SUBWF  4A,W
02AE:  ADDLW  FC
02AF:  BTFSC  03.0
02B0:  GOTO   2D2
02B1:  ADDLW  04
02B2:  GOTO   491
....................     {
....................         case 1:
....................             while(ECHO_1 == 0) {}
02B3:  BSF    45.1
02B4:  MOVF   45,W
02B5:  BSF    03.5
02B6:  MOVWF  07
02B7:  BCF    03.5
02B8:  BTFSS  07.1
02B9:  GOTO   2B3
....................             break;
02BA:  GOTO   2D2
....................         case 2:
....................             while(ECHO_2 == 0) {}
02BB:  BSF    45.3
02BC:  MOVF   45,W
02BD:  BSF    03.5
02BE:  MOVWF  07
02BF:  BCF    03.5
02C0:  BTFSS  07.3
02C1:  GOTO   2BB
....................             break;
02C2:  GOTO   2D2
....................         case 3:
....................             while(ECHO_3 == 0) {}
02C3:  BSF    45.5
02C4:  MOVF   45,W
02C5:  BSF    03.5
02C6:  MOVWF  07
02C7:  BCF    03.5
02C8:  BTFSS  07.5
02C9:  GOTO   2C3
....................             break;
02CA:  GOTO   2D2
....................         case 4:
....................             while(ECHO_4 == 0) {}
02CB:  BSF    45.7
02CC:  MOVF   45,W
02CD:  BSF    03.5
02CE:  MOVWF  07
02CF:  BCF    03.5
02D0:  BTFSS  07.7
02D1:  GOTO   2CB
....................             break;
....................     }
.................... 
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);
02D2:  MOVLW  B5
02D3:  MOVWF  10
....................     set_timer1(0);
02D4:  CLRF   0E
02D5:  CLRF   0F
02D6:  CLRF   0E
02D7:  NOP
.................... 
....................     switch(sensor) 
02D8:  MOVLW  01
02D9:  SUBWF  4A,W
02DA:  ADDLW  FC
02DB:  BTFSC  03.0
02DC:  GOTO   2FE
02DD:  ADDLW  04
02DE:  GOTO   499
....................     {
....................         case 1:
....................             while(ECHO_1 == 1) {}
02DF:  BSF    45.1
02E0:  MOVF   45,W
02E1:  BSF    03.5
02E2:  MOVWF  07
02E3:  BCF    03.5
02E4:  BTFSC  07.1
02E5:  GOTO   2DF
....................             break;
02E6:  GOTO   2FE
....................         case 2:
....................             while(ECHO_2 == 1) {}
02E7:  BSF    45.3
02E8:  MOVF   45,W
02E9:  BSF    03.5
02EA:  MOVWF  07
02EB:  BCF    03.5
02EC:  BTFSC  07.3
02ED:  GOTO   2E7
....................             break;
02EE:  GOTO   2FE
....................         case 3:
....................             while(ECHO_3 == 1) {}
02EF:  BSF    45.5
02F0:  MOVF   45,W
02F1:  BSF    03.5
02F2:  MOVWF  07
02F3:  BCF    03.5
02F4:  BTFSC  07.5
02F5:  GOTO   2EF
....................             break;
02F6:  GOTO   2FE
....................         case 4:
....................             while(ECHO_4 == 1) {}
02F7:  BSF    45.7
02F8:  MOVF   45,W
02F9:  BSF    03.5
02FA:  MOVWF  07
02FB:  BCF    03.5
02FC:  BTFSC  07.7
02FD:  GOTO   2F7
....................             break;
....................     }
.................... 
....................     setup_timer_1(T1_DISABLED);
02FE:  CLRF   10
.................... 
....................     time[sensor - 1] = get_timer1() * 1.6f;  
02FF:  MOVLW  01
0300:  SUBWF  4A,W
0301:  MOVWF  77
0302:  RLF    77,F
0303:  RLF    77,F
0304:  MOVLW  FC
0305:  ANDWF  77,F
0306:  MOVF   77,W
0307:  ADDLW  35
0308:  MOVWF  04
0309:  BCF    03.7
030A:  MOVF   0F,W
030B:  MOVWF  7A
030C:  MOVF   0E,W
030D:  MOVWF  77
030E:  MOVF   0F,W
030F:  SUBWF  7A,W
0310:  BTFSS  03.2
0311:  GOTO   30A
0312:  MOVF   77,W
0313:  MOVWF  4D
0314:  MOVF   7A,W
0315:  MOVWF  4E
0316:  MOVF   4E,W
0317:  MOVWF  50
0318:  MOVF   4D,W
0319:  MOVWF  4F
*
0336:  MOVF   7A,W
0337:  MOVWF  5A
0338:  MOVF   79,W
0339:  MOVWF  59
033A:  MOVF   78,W
033B:  MOVWF  58
033C:  MOVF   77,W
033D:  MOVWF  57
033E:  MOVLW  CD
033F:  MOVWF  5E
0340:  MOVLW  CC
0341:  MOVWF  5D
0342:  MOVLW  4C
0343:  MOVWF  5C
0344:  MOVLW  7F
0345:  MOVWF  5B
0346:  CALL   1F0
0347:  MOVF   77,W
0348:  MOVWF  00
0349:  INCF   04,F
034A:  MOVF   78,W
034B:  MOVWF  00
034C:  INCF   04,F
034D:  MOVF   79,W
034E:  MOVWF  00
034F:  INCF   04,F
0350:  MOVF   7A,W
0351:  MOVWF  00
....................     distance[sensor - 1] = (float)time[sensor - 1] / 58.0f; 
0352:  MOVLW  01
0353:  SUBWF  4A,W
0354:  MOVWF  77
0355:  RLF    77,F
0356:  RLF    77,F
0357:  MOVLW  FC
0358:  ANDWF  77,F
0359:  MOVF   77,W
035A:  ADDLW  25
035B:  MOVWF  78
035C:  CLRF   7A
035D:  BTFSC  03.0
035E:  INCF   7A,F
035F:  MOVF   78,W
0360:  MOVWF  4B
0361:  MOVF   7A,W
0362:  MOVWF  4C
0363:  MOVLW  01
0364:  SUBWF  4A,W
0365:  MOVWF  77
0366:  RLF    77,F
0367:  RLF    77,F
0368:  MOVLW  FC
0369:  ANDWF  77,F
036A:  MOVF   77,W
036B:  ADDLW  35
036C:  MOVWF  04
036D:  BCF    03.7
036E:  MOVF   00,W
036F:  MOVWF  77
0370:  INCF   04,F
0371:  MOVF   00,W
0372:  MOVWF  78
0373:  INCF   04,F
0374:  MOVF   00,W
0375:  MOVWF  79
0376:  INCF   04,F
0377:  MOVF   00,W
0378:  MOVWF  7A
0379:  MOVLW  FD
037A:  ADDWF  04,F
037B:  MOVF   7A,W
037C:  MOVWF  50
037D:  MOVF   79,W
037E:  MOVWF  4F
037F:  MOVF   78,W
0380:  MOVWF  4E
0381:  MOVF   77,W
0382:  MOVWF  4D
0383:  MOVF   50,W
0384:  MOVWF  54
0385:  MOVF   4F,W
0386:  MOVWF  53
0387:  MOVF   4E,W
0388:  MOVWF  52
0389:  MOVF   4D,W
038A:  MOVWF  51
038B:  CLRF   58
038C:  CLRF   57
038D:  MOVLW  68
038E:  MOVWF  56
038F:  MOVLW  84
0390:  MOVWF  55
*
045A:  MOVF   4B,W
045B:  MOVWF  04
045C:  BCF    03.7
045D:  BTFSC  4C.0
045E:  BSF    03.7
045F:  MOVF   77,W
0460:  MOVWF  00
0461:  INCF   04,F
0462:  MOVF   78,W
0463:  MOVWF  00
0464:  INCF   04,F
0465:  MOVF   79,W
0466:  MOVWF  00
0467:  INCF   04,F
0468:  MOVF   7A,W
0469:  MOVWF  00
.................... 
....................     return distance[sensor - 1];
046A:  MOVLW  01
046B:  SUBWF  4A,W
046C:  MOVWF  77
046D:  RLF    77,F
046E:  RLF    77,F
046F:  MOVLW  FC
0470:  ANDWF  77,F
0471:  MOVF   77,W
0472:  ADDLW  25
0473:  MOVWF  04
0474:  BCF    03.7
0475:  MOVF   00,W
0476:  MOVWF  77
0477:  INCF   04,F
0478:  MOVF   00,W
0479:  MOVWF  78
047A:  INCF   04,F
047B:  MOVF   00,W
047C:  MOVWF  79
047D:  INCF   04,F
047E:  MOVF   00,W
047F:  MOVWF  7A
0480:  RETURN
.................... }
.................... 
.................... void distance_display()
.................... {
....................     lcd_gotoxy(1, 1);
*
0666:  MOVLW  01
0667:  MOVWF  58
0668:  MOVWF  59
0669:  CALL   146
....................     printf(lcd_putc, "D:%.0fcm   ", distance[0]);
066A:  MOVLW  44
066B:  MOVWF  57
066C:  CALL   158
066D:  MOVLW  3A
066E:  MOVWF  57
066F:  CALL   158
0670:  MOVLW  89
0671:  MOVWF  04
0672:  MOVF   28,W
0673:  MOVWF  4D
0674:  MOVF   27,W
0675:  MOVWF  4C
0676:  MOVF   26,W
0677:  MOVWF  4B
0678:  MOVF   25,W
0679:  MOVWF  4A
067A:  CLRF   4E
067B:  CALL   52F
067C:  MOVLW  07
067D:  BSF    03.6
067E:  MOVWF  0D
067F:  MOVLW  00
0680:  MOVWF  0F
0681:  BCF    03.0
0682:  MOVLW  05
0683:  BCF    03.6
0684:  MOVWF  4A
0685:  CALL   60F
....................     lcd_gotoxy(1, 2);
0686:  MOVLW  01
0687:  MOVWF  58
0688:  MOVLW  02
0689:  MOVWF  59
068A:  CALL   146
....................     printf(lcd_putc, "T:%.0fcm   ", distance[1]);
068B:  MOVLW  54
068C:  MOVWF  57
068D:  CALL   158
068E:  MOVLW  3A
068F:  MOVWF  57
0690:  CALL   158
0691:  MOVLW  89
0692:  MOVWF  04
0693:  MOVF   2C,W
0694:  MOVWF  4D
0695:  MOVF   2B,W
0696:  MOVWF  4C
0697:  MOVF   2A,W
0698:  MOVWF  4B
0699:  MOVF   29,W
069A:  MOVWF  4A
069B:  CLRF   4E
069C:  CALL   52F
069D:  MOVLW  0D
069E:  BSF    03.6
069F:  MOVWF  0D
06A0:  MOVLW  00
06A1:  MOVWF  0F
06A2:  BCF    03.0
06A3:  MOVLW  05
06A4:  BCF    03.6
06A5:  MOVWF  4A
06A6:  CALL   60F
....................     lcd_gotoxy(9, 1);
06A7:  MOVLW  09
06A8:  MOVWF  58
06A9:  MOVLW  01
06AA:  MOVWF  59
06AB:  CALL   146
....................     printf(lcd_putc, "N:%.0fcm   ", distance[2]);
06AC:  MOVLW  4E
06AD:  MOVWF  57
06AE:  CALL   158
06AF:  MOVLW  3A
06B0:  MOVWF  57
06B1:  CALL   158
06B2:  MOVLW  89
06B3:  MOVWF  04
06B4:  MOVF   30,W
06B5:  MOVWF  4D
06B6:  MOVF   2F,W
06B7:  MOVWF  4C
06B8:  MOVF   2E,W
06B9:  MOVWF  4B
06BA:  MOVF   2D,W
06BB:  MOVWF  4A
06BC:  CLRF   4E
06BD:  CALL   52F
06BE:  MOVLW  13
06BF:  BSF    03.6
06C0:  MOVWF  0D
06C1:  MOVLW  00
06C2:  MOVWF  0F
06C3:  BCF    03.0
06C4:  MOVLW  05
06C5:  BCF    03.6
06C6:  MOVWF  4A
06C7:  CALL   60F
....................     lcd_gotoxy(9, 2);
06C8:  MOVLW  09
06C9:  MOVWF  58
06CA:  MOVLW  02
06CB:  MOVWF  59
06CC:  CALL   146
....................     printf(lcd_putc, "B:%.0fcm   ", distance[3]);
06CD:  MOVLW  42
06CE:  MOVWF  57
06CF:  CALL   158
06D0:  MOVLW  3A
06D1:  MOVWF  57
06D2:  CALL   158
06D3:  MOVLW  89
06D4:  MOVWF  04
06D5:  MOVF   34,W
06D6:  MOVWF  4D
06D7:  MOVF   33,W
06D8:  MOVWF  4C
06D9:  MOVF   32,W
06DA:  MOVWF  4B
06DB:  MOVF   31,W
06DC:  MOVWF  4A
06DD:  CLRF   4E
06DE:  CALL   52F
06DF:  MOVLW  19
06E0:  BSF    03.6
06E1:  MOVWF  0D
06E2:  MOVLW  00
06E3:  MOVWF  0F
06E4:  BCF    03.0
06E5:  MOVLW  05
06E6:  BCF    03.6
06E7:  MOVWF  4A
06E8:  CALL   60F
06E9:  BCF    0A.3
06EA:  BCF    0A.4
06EB:  GOTO   7F2 (RETURN)
.................... }
.................... 
.................... void threshold_display()
.................... {
....................     lcd_gotoxy(3, 1);
06EC:  MOVLW  03
06ED:  MOVWF  58
06EE:  MOVLW  01
06EF:  MOVWF  59
06F0:  CALL   146
....................     printf(lcd_putc, "Set Threshold");
06F1:  MOVLW  1C
06F2:  BSF    03.6
06F3:  MOVWF  0D
06F4:  MOVLW  00
06F5:  MOVWF  0F
06F6:  BCF    03.6
06F7:  CALL   184
.................... 
....................     lcd_gotoxy(1, 2);
06F8:  MOVLW  01
06F9:  MOVWF  58
06FA:  MOVLW  02
06FB:  MOVWF  59
06FC:  CALL   146
....................     printf(lcd_putc, "Threshold: %f", threshold);
06FD:  MOVLW  23
06FE:  BSF    03.6
06FF:  MOVWF  0D
0700:  MOVLW  00
0701:  MOVWF  0F
0702:  BCF    03.0
0703:  MOVLW  0B
0704:  BCF    03.6
0705:  MOVWF  4A
0706:  CALL   60F
0707:  MOVLW  89
0708:  MOVWF  04
0709:  MOVF   23,W
070A:  MOVWF  4D
070B:  MOVF   22,W
070C:  MOVWF  4C
070D:  MOVF   21,W
070E:  MOVWF  4B
070F:  MOVF   20,W
0710:  MOVWF  4A
0711:  MOVLW  02
0712:  MOVWF  4E
0713:  CALL   52F
0714:  BCF    0A.3
0715:  BCF    0A.4
0716:  GOTO   7F4 (RETURN)
.................... }
.................... 
.................... void set_threshold()
.................... {
....................     if (BUTTON_B6 == 0) 
0717:  BSF    03.5
0718:  BSF    06.6
0719:  BCF    03.5
071A:  BTFSC  06.6
071B:  GOTO   73B
....................     {
....................         while(BUTTON_B6 == 0)   {}
071C:  BSF    03.5
071D:  BSF    06.6
071E:  BCF    03.5
071F:  BTFSS  06.6
0720:  GOTO   71C
....................         threshold += 10;
0721:  BCF    03.1
0722:  MOVF   23,W
0723:  MOVWF  4D
0724:  MOVF   22,W
0725:  MOVWF  4C
0726:  MOVF   21,W
0727:  MOVWF  4B
0728:  MOVF   20,W
0729:  MOVWF  4A
072A:  CLRF   51
072B:  CLRF   50
072C:  MOVLW  20
072D:  MOVWF  4F
072E:  MOVLW  82
072F:  MOVWF  4E
0730:  BSF    0A.3
0731:  CALL   000
0732:  BCF    0A.3
0733:  MOVF   7A,W
0734:  MOVWF  23
0735:  MOVF   79,W
0736:  MOVWF  22
0737:  MOVF   78,W
0738:  MOVWF  21
0739:  MOVF   77,W
073A:  MOVWF  20
....................     }
....................     if (BUTTON_B7 == 0)  
073B:  BSF    03.5
073C:  BSF    06.7
073D:  BCF    03.5
073E:  BTFSC  06.7
073F:  GOTO   772
....................     {
....................         while(BUTTON_B7 == 0)   {}
0740:  BSF    03.5
0741:  BSF    06.7
0742:  BCF    03.5
0743:  BTFSS  06.7
0744:  GOTO   740
....................         threshold -= 10;
0745:  BSF    03.1
0746:  MOVF   23,W
0747:  MOVWF  4D
0748:  MOVF   22,W
0749:  MOVWF  4C
074A:  MOVF   21,W
074B:  MOVWF  4B
074C:  MOVF   20,W
074D:  MOVWF  4A
074E:  CLRF   51
074F:  CLRF   50
0750:  MOVLW  20
0751:  MOVWF  4F
0752:  MOVLW  82
0753:  MOVWF  4E
0754:  BSF    0A.3
0755:  CALL   000
0756:  BCF    0A.3
0757:  MOVF   7A,W
0758:  MOVWF  23
0759:  MOVF   79,W
075A:  MOVWF  22
075B:  MOVF   78,W
075C:  MOVWF  21
075D:  MOVF   77,W
075E:  MOVWF  20
....................         if (threshold < 0) threshold = 0;  
075F:  MOVF   23,W
0760:  MOVWF  51
0761:  MOVF   22,W
0762:  MOVWF  50
0763:  MOVF   21,W
0764:  MOVWF  4F
0765:  MOVF   20,W
0766:  MOVWF  4E
0767:  CLRF   55
0768:  CLRF   54
0769:  CLRF   53
076A:  CLRF   52
076B:  CALL   4A1
076C:  BTFSS  03.0
076D:  GOTO   772
076E:  CLRF   23
076F:  CLRF   22
0770:  CLRF   21
0771:  CLRF   20
....................     }
0772:  BCF    0A.3
0773:  BCF    0A.4
0774:  GOTO   7F5 (RETURN)
.................... }
.................... 
.................... void choose_mode()
.................... {
....................     if (BUTTON_B0 == 0)  
*
01DA:  BSF    03.5
01DB:  BSF    06.0
01DC:  BCF    03.5
01DD:  BTFSC  06.0
01DE:  GOTO   1ED
....................     {
....................         while(BUTTON_B0 == 0)   
01DF:  BSF    03.5
01E0:  BSF    06.0
01E1:  BCF    03.5
01E2:  BTFSS  06.0
....................         {}
01E3:  GOTO   1DF
....................         lcd_mode = !lcd_mode;
01E4:  MOVLW  01
01E5:  XORWF  24,F
....................         lcd_putc("\f");
01E6:  MOVLW  2A
01E7:  BSF    03.6
01E8:  MOVWF  0D
01E9:  MOVLW  00
01EA:  MOVWF  0F
01EB:  BCF    03.6
01EC:  CALL   184
....................     }
01ED:  BCF    0A.3
01EE:  BCF    0A.4
01EF:  GOTO   7A7 (RETURN)
.................... }
.................... 
.................... void main()
*
0775:  MOVF   03,W
0776:  ANDLW  1F
0777:  MOVWF  03
0778:  CLRF   23
0779:  CLRF   22
077A:  MOVLW  48
077B:  MOVWF  21
077C:  MOVLW  84
077D:  MOVWF  20
077E:  BCF    24.0
077F:  MOVLW  FF
0780:  MOVWF  45
0781:  CLRF   47
0782:  CLRF   46
0783:  BSF    03.5
0784:  BSF    1F.0
0785:  BSF    1F.1
0786:  BSF    1F.2
0787:  BCF    1F.3
0788:  MOVLW  07
0789:  MOVWF  1C
078A:  BCF    03.7
.................... {
....................     lcd_init();  
078B:  BCF    03.5
078C:  GOTO   100
....................     lcd_putc("\f");
078D:  MOVLW  2B
078E:  BSF    03.6
078F:  MOVWF  0D
0790:  MOVLW  00
0791:  MOVWF  0F
0792:  BCF    03.6
0793:  CALL   184
....................     lcd_gotoxy(1, 1);
0794:  MOVLW  01
0795:  MOVWF  58
0796:  MOVWF  59
0797:  CALL   146
....................     lcd_putc("HELLO");
0798:  MOVLW  2C
0799:  BSF    03.6
079A:  MOVWF  0D
079B:  MOVLW  00
079C:  MOVWF  0F
079D:  BCF    03.6
079E:  CALL   184
....................     delay_ms(1000);
079F:  MOVLW  04
07A0:  MOVWF  4A
07A1:  MOVLW  FA
07A2:  MOVWF  58
07A3:  CALL   02F
07A4:  DECFSZ 4A,F
07A5:  GOTO   7A1
....................     while(TRUE)
....................     {
....................       choose_mode();
07A6:  GOTO   1DA
....................       measure_distance(1);
07A7:  MOVLW  01
07A8:  MOVWF  4A
07A9:  CALL   265
....................       measure_distance(2);
07AA:  MOVLW  02
07AB:  MOVWF  4A
07AC:  CALL   265
....................       measure_distance(3);
07AD:  MOVLW  03
07AE:  MOVWF  4A
07AF:  CALL   265
....................       measure_distance(4);
07B0:  MOVLW  04
07B1:  MOVWF  4A
07B2:  CALL   265
.................... 
....................       bool alarm_triggered = false;
07B3:  BCF    48.0
....................       for (int i = 0; i < 4; i++) 
07B4:  CLRF   49
07B5:  MOVF   49,W
07B6:  SUBLW  03
07B7:  BTFSS  03.0
07B8:  GOTO   7E4
....................       {
....................             if (distance[i] > threshold) 
07B9:  RLF    49,W
07BA:  MOVWF  77
07BB:  RLF    77,F
07BC:  MOVLW  FC
07BD:  ANDWF  77,F
07BE:  MOVF   77,W
07BF:  ADDLW  25
07C0:  MOVWF  04
07C1:  BCF    03.7
07C2:  MOVF   00,W
07C3:  MOVWF  4A
07C4:  INCF   04,F
07C5:  MOVF   00,W
07C6:  MOVWF  4B
07C7:  INCF   04,F
07C8:  MOVF   00,W
07C9:  MOVWF  4C
07CA:  INCF   04,F
07CB:  MOVF   00,W
07CC:  MOVWF  4D
07CD:  MOVF   23,W
07CE:  MOVWF  51
07CF:  MOVF   22,W
07D0:  MOVWF  50
07D1:  MOVF   21,W
07D2:  MOVWF  4F
07D3:  MOVF   20,W
07D4:  MOVWF  4E
07D5:  MOVF   4D,W
07D6:  MOVWF  55
07D7:  MOVF   4C,W
07D8:  MOVWF  54
07D9:  MOVF   4B,W
07DA:  MOVWF  53
07DB:  MOVF   4A,W
07DC:  MOVWF  52
07DD:  CALL   4A1
07DE:  BTFSS  03.0
07DF:  GOTO   7E2
....................             {
....................                 alarm_triggered = true; 
07E0:  BSF    48.0
....................                 break; 
07E1:  GOTO   7E4
....................             }
07E2:  INCF   49,F
07E3:  GOTO   7B5
....................         }
.................... 
....................         if (alarm_triggered) 
07E4:  BTFSS  48.0
07E5:  GOTO   7EB
....................         {
....................             output_high(buzzer); 
07E6:  BSF    03.5
07E7:  BCF    08.2
07E8:  BCF    03.5
07E9:  BSF    08.2
....................         } 
07EA:  GOTO   7EF
....................         else 
....................         {
....................             output_low(buzzer);  
07EB:  BSF    03.5
07EC:  BCF    08.2
07ED:  BCF    03.5
07EE:  BCF    08.2
....................         }
.................... 
....................      
....................       if(lcd_mode == false)
07EF:  BTFSC  24.0
07F0:  GOTO   7F3
....................       {
....................            distance_display();      
07F1:  GOTO   666
....................       }
07F2:  GOTO   7F5
....................       else
....................       {
....................            threshold_display();
07F3:  GOTO   6EC
....................            set_threshold();
07F4:  GOTO   717
....................       }
.................... 
....................         delay_ms(100);  
07F5:  MOVLW  64
07F6:  MOVWF  58
07F7:  CALL   02F
07F8:  GOTO   7A6
....................     }
.................... }
.................... 
07F9:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
